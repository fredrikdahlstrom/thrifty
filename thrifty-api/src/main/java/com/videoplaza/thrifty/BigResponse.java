/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.videoplaza.thrifty;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Response from ThriftyService.whatIsHappening
 * @param someString, some string
 * @param listOfStrings, a list of strings
 */
public class BigResponse implements org.apache.thrift.TBase<BigResponse, BigResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BigResponse");

  private static final org.apache.thrift.protocol.TField SOME_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("someString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LIST_OF_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("listOfStrings", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SET_OF_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("setOfStrings", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_OF_STRING_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapOfStringStrings", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField LOCATIONS_BY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locationsByName", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BigResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BigResponseTupleSchemeFactory());
  }

  public String someString; // required
  public List<String> listOfStrings; // optional
  public Set<String> setOfStrings; // optional
  public Map<String,String> mapOfStringStrings; // optional
  public int age; // optional
  public String language; // optional
  public Location location; // optional
  public Map<String,Location> locationsByName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOME_STRING((short)1, "someString"),
    LIST_OF_STRINGS((short)2, "listOfStrings"),
    SET_OF_STRINGS((short)3, "setOfStrings"),
    MAP_OF_STRING_STRINGS((short)4, "mapOfStringStrings"),
    AGE((short)5, "age"),
    LANGUAGE((short)6, "language"),
    LOCATION((short)7, "location"),
    LOCATIONS_BY_NAME((short)8, "locationsByName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOME_STRING
          return SOME_STRING;
        case 2: // LIST_OF_STRINGS
          return LIST_OF_STRINGS;
        case 3: // SET_OF_STRINGS
          return SET_OF_STRINGS;
        case 4: // MAP_OF_STRING_STRINGS
          return MAP_OF_STRING_STRINGS;
        case 5: // AGE
          return AGE;
        case 6: // LANGUAGE
          return LANGUAGE;
        case 7: // LOCATION
          return LOCATION;
        case 8: // LOCATIONS_BY_NAME
          return LOCATIONS_BY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.LIST_OF_STRINGS,_Fields.SET_OF_STRINGS,_Fields.MAP_OF_STRING_STRINGS,_Fields.AGE,_Fields.LANGUAGE,_Fields.LOCATION,_Fields.LOCATIONS_BY_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOME_STRING, new org.apache.thrift.meta_data.FieldMetaData("someString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_OF_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("listOfStrings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_OF_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("setOfStrings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_OF_STRING_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("mapOfStringStrings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.LOCATIONS_BY_NAME, new org.apache.thrift.meta_data.FieldMetaData("locationsByName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BigResponse.class, metaDataMap);
  }

  public BigResponse() {
    this.language = "english";

  }

  public BigResponse(
    String someString)
  {
    this();
    this.someString = someString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BigResponse(BigResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSomeString()) {
      this.someString = other.someString;
    }
    if (other.isSetListOfStrings()) {
      List<String> __this__listOfStrings = new ArrayList<String>();
      for (String other_element : other.listOfStrings) {
        __this__listOfStrings.add(other_element);
      }
      this.listOfStrings = __this__listOfStrings;
    }
    if (other.isSetSetOfStrings()) {
      Set<String> __this__setOfStrings = new HashSet<String>();
      for (String other_element : other.setOfStrings) {
        __this__setOfStrings.add(other_element);
      }
      this.setOfStrings = __this__setOfStrings;
    }
    if (other.isSetMapOfStringStrings()) {
      Map<String,String> __this__mapOfStringStrings = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.mapOfStringStrings.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__mapOfStringStrings_copy_key = other_element_key;

        String __this__mapOfStringStrings_copy_value = other_element_value;

        __this__mapOfStringStrings.put(__this__mapOfStringStrings_copy_key, __this__mapOfStringStrings_copy_value);
      }
      this.mapOfStringStrings = __this__mapOfStringStrings;
    }
    this.age = other.age;
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
    if (other.isSetLocationsByName()) {
      Map<String,Location> __this__locationsByName = new HashMap<String,Location>();
      for (Map.Entry<String, Location> other_element : other.locationsByName.entrySet()) {

        String other_element_key = other_element.getKey();
        Location other_element_value = other_element.getValue();

        String __this__locationsByName_copy_key = other_element_key;

        Location __this__locationsByName_copy_value = new Location(other_element_value);

        __this__locationsByName.put(__this__locationsByName_copy_key, __this__locationsByName_copy_value);
      }
      this.locationsByName = __this__locationsByName;
    }
  }

  public BigResponse deepCopy() {
    return new BigResponse(this);
  }

  @Override
  public void clear() {
    this.someString = null;
    this.listOfStrings = null;
    this.setOfStrings = null;
    this.mapOfStringStrings = null;
    setAgeIsSet(false);
    this.age = 0;
    this.language = "english";

    this.location = null;
    this.locationsByName = null;
  }

  public String getSomeString() {
    return this.someString;
  }

  public BigResponse setSomeString(String someString) {
    this.someString = someString;
    return this;
  }

  public void unsetSomeString() {
    this.someString = null;
  }

  /** Returns true if field someString is set (has been assigned a value) and false otherwise */
  public boolean isSetSomeString() {
    return this.someString != null;
  }

  public void setSomeStringIsSet(boolean value) {
    if (!value) {
      this.someString = null;
    }
  }

  public int getListOfStringsSize() {
    return (this.listOfStrings == null) ? 0 : this.listOfStrings.size();
  }

  public java.util.Iterator<String> getListOfStringsIterator() {
    return (this.listOfStrings == null) ? null : this.listOfStrings.iterator();
  }

  public void addToListOfStrings(String elem) {
    if (this.listOfStrings == null) {
      this.listOfStrings = new ArrayList<String>();
    }
    this.listOfStrings.add(elem);
  }

  public List<String> getListOfStrings() {
    return this.listOfStrings;
  }

  public BigResponse setListOfStrings(List<String> listOfStrings) {
    this.listOfStrings = listOfStrings;
    return this;
  }

  public void unsetListOfStrings() {
    this.listOfStrings = null;
  }

  /** Returns true if field listOfStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetListOfStrings() {
    return this.listOfStrings != null;
  }

  public void setListOfStringsIsSet(boolean value) {
    if (!value) {
      this.listOfStrings = null;
    }
  }

  public int getSetOfStringsSize() {
    return (this.setOfStrings == null) ? 0 : this.setOfStrings.size();
  }

  public java.util.Iterator<String> getSetOfStringsIterator() {
    return (this.setOfStrings == null) ? null : this.setOfStrings.iterator();
  }

  public void addToSetOfStrings(String elem) {
    if (this.setOfStrings == null) {
      this.setOfStrings = new HashSet<String>();
    }
    this.setOfStrings.add(elem);
  }

  public Set<String> getSetOfStrings() {
    return this.setOfStrings;
  }

  public BigResponse setSetOfStrings(Set<String> setOfStrings) {
    this.setOfStrings = setOfStrings;
    return this;
  }

  public void unsetSetOfStrings() {
    this.setOfStrings = null;
  }

  /** Returns true if field setOfStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetSetOfStrings() {
    return this.setOfStrings != null;
  }

  public void setSetOfStringsIsSet(boolean value) {
    if (!value) {
      this.setOfStrings = null;
    }
  }

  public int getMapOfStringStringsSize() {
    return (this.mapOfStringStrings == null) ? 0 : this.mapOfStringStrings.size();
  }

  public void putToMapOfStringStrings(String key, String val) {
    if (this.mapOfStringStrings == null) {
      this.mapOfStringStrings = new HashMap<String,String>();
    }
    this.mapOfStringStrings.put(key, val);
  }

  public Map<String,String> getMapOfStringStrings() {
    return this.mapOfStringStrings;
  }

  public BigResponse setMapOfStringStrings(Map<String,String> mapOfStringStrings) {
    this.mapOfStringStrings = mapOfStringStrings;
    return this;
  }

  public void unsetMapOfStringStrings() {
    this.mapOfStringStrings = null;
  }

  /** Returns true if field mapOfStringStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetMapOfStringStrings() {
    return this.mapOfStringStrings != null;
  }

  public void setMapOfStringStringsIsSet(boolean value) {
    if (!value) {
      this.mapOfStringStrings = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public BigResponse setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bit_vector.clear(__AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return __isset_bit_vector.get(__AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bit_vector.set(__AGE_ISSET_ID, value);
  }

  public String getLanguage() {
    return this.language;
  }

  public BigResponse setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public Location getLocation() {
    return this.location;
  }

  public BigResponse setLocation(Location location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getLocationsByNameSize() {
    return (this.locationsByName == null) ? 0 : this.locationsByName.size();
  }

  public void putToLocationsByName(String key, Location val) {
    if (this.locationsByName == null) {
      this.locationsByName = new HashMap<String,Location>();
    }
    this.locationsByName.put(key, val);
  }

  public Map<String,Location> getLocationsByName() {
    return this.locationsByName;
  }

  public BigResponse setLocationsByName(Map<String,Location> locationsByName) {
    this.locationsByName = locationsByName;
    return this;
  }

  public void unsetLocationsByName() {
    this.locationsByName = null;
  }

  /** Returns true if field locationsByName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationsByName() {
    return this.locationsByName != null;
  }

  public void setLocationsByNameIsSet(boolean value) {
    if (!value) {
      this.locationsByName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOME_STRING:
      if (value == null) {
        unsetSomeString();
      } else {
        setSomeString((String)value);
      }
      break;

    case LIST_OF_STRINGS:
      if (value == null) {
        unsetListOfStrings();
      } else {
        setListOfStrings((List<String>)value);
      }
      break;

    case SET_OF_STRINGS:
      if (value == null) {
        unsetSetOfStrings();
      } else {
        setSetOfStrings((Set<String>)value);
      }
      break;

    case MAP_OF_STRING_STRINGS:
      if (value == null) {
        unsetMapOfStringStrings();
      } else {
        setMapOfStringStrings((Map<String,String>)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((Location)value);
      }
      break;

    case LOCATIONS_BY_NAME:
      if (value == null) {
        unsetLocationsByName();
      } else {
        setLocationsByName((Map<String,Location>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOME_STRING:
      return getSomeString();

    case LIST_OF_STRINGS:
      return getListOfStrings();

    case SET_OF_STRINGS:
      return getSetOfStrings();

    case MAP_OF_STRING_STRINGS:
      return getMapOfStringStrings();

    case AGE:
      return Integer.valueOf(getAge());

    case LANGUAGE:
      return getLanguage();

    case LOCATION:
      return getLocation();

    case LOCATIONS_BY_NAME:
      return getLocationsByName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOME_STRING:
      return isSetSomeString();
    case LIST_OF_STRINGS:
      return isSetListOfStrings();
    case SET_OF_STRINGS:
      return isSetSetOfStrings();
    case MAP_OF_STRING_STRINGS:
      return isSetMapOfStringStrings();
    case AGE:
      return isSetAge();
    case LANGUAGE:
      return isSetLanguage();
    case LOCATION:
      return isSetLocation();
    case LOCATIONS_BY_NAME:
      return isSetLocationsByName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BigResponse)
      return this.equals((BigResponse)that);
    return false;
  }

  public boolean equals(BigResponse that) {
    if (that == null)
      return false;

    boolean this_present_someString = true && this.isSetSomeString();
    boolean that_present_someString = true && that.isSetSomeString();
    if (this_present_someString || that_present_someString) {
      if (!(this_present_someString && that_present_someString))
        return false;
      if (!this.someString.equals(that.someString))
        return false;
    }

    boolean this_present_listOfStrings = true && this.isSetListOfStrings();
    boolean that_present_listOfStrings = true && that.isSetListOfStrings();
    if (this_present_listOfStrings || that_present_listOfStrings) {
      if (!(this_present_listOfStrings && that_present_listOfStrings))
        return false;
      if (!this.listOfStrings.equals(that.listOfStrings))
        return false;
    }

    boolean this_present_setOfStrings = true && this.isSetSetOfStrings();
    boolean that_present_setOfStrings = true && that.isSetSetOfStrings();
    if (this_present_setOfStrings || that_present_setOfStrings) {
      if (!(this_present_setOfStrings && that_present_setOfStrings))
        return false;
      if (!this.setOfStrings.equals(that.setOfStrings))
        return false;
    }

    boolean this_present_mapOfStringStrings = true && this.isSetMapOfStringStrings();
    boolean that_present_mapOfStringStrings = true && that.isSetMapOfStringStrings();
    if (this_present_mapOfStringStrings || that_present_mapOfStringStrings) {
      if (!(this_present_mapOfStringStrings && that_present_mapOfStringStrings))
        return false;
      if (!this.mapOfStringStrings.equals(that.mapOfStringStrings))
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_locationsByName = true && this.isSetLocationsByName();
    boolean that_present_locationsByName = true && that.isSetLocationsByName();
    if (this_present_locationsByName || that_present_locationsByName) {
      if (!(this_present_locationsByName && that_present_locationsByName))
        return false;
      if (!this.locationsByName.equals(that.locationsByName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BigResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BigResponse typedOther = (BigResponse)other;

    lastComparison = Boolean.valueOf(isSetSomeString()).compareTo(typedOther.isSetSomeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSomeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.someString, typedOther.someString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListOfStrings()).compareTo(typedOther.isSetListOfStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListOfStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listOfStrings, typedOther.listOfStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetOfStrings()).compareTo(typedOther.isSetSetOfStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetOfStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setOfStrings, typedOther.setOfStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapOfStringStrings()).compareTo(typedOther.isSetMapOfStringStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapOfStringStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapOfStringStrings, typedOther.mapOfStringStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(typedOther.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, typedOther.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationsByName()).compareTo(typedOther.isSetLocationsByName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationsByName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationsByName, typedOther.locationsByName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BigResponse(");
    boolean first = true;

    sb.append("someString:");
    if (this.someString == null) {
      sb.append("null");
    } else {
      sb.append(this.someString);
    }
    first = false;
    if (isSetListOfStrings()) {
      if (!first) sb.append(", ");
      sb.append("listOfStrings:");
      if (this.listOfStrings == null) {
        sb.append("null");
      } else {
        sb.append(this.listOfStrings);
      }
      first = false;
    }
    if (isSetSetOfStrings()) {
      if (!first) sb.append(", ");
      sb.append("setOfStrings:");
      if (this.setOfStrings == null) {
        sb.append("null");
      } else {
        sb.append(this.setOfStrings);
      }
      first = false;
    }
    if (isSetMapOfStringStrings()) {
      if (!first) sb.append(", ");
      sb.append("mapOfStringStrings:");
      if (this.mapOfStringStrings == null) {
        sb.append("null");
      } else {
        sb.append(this.mapOfStringStrings);
      }
      first = false;
    }
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetLocationsByName()) {
      if (!first) sb.append(", ");
      sb.append("locationsByName:");
      if (this.locationsByName == null) {
        sb.append("null");
      } else {
        sb.append(this.locationsByName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (someString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'someString' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BigResponseStandardSchemeFactory implements SchemeFactory {
    public BigResponseStandardScheme getScheme() {
      return new BigResponseStandardScheme();
    }
  }

  private static class BigResponseStandardScheme extends StandardScheme<BigResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BigResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOME_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.someString = iprot.readString();
              struct.setSomeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIST_OF_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.listOfStrings = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.listOfStrings.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setListOfStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SET_OF_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.setOfStrings = new HashSet<String>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.setOfStrings.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setSetOfStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAP_OF_STRING_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.mapOfStringStrings = new HashMap<String,String>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  String _key8; // required
                  String _val9; // optional
                  _key8 = iprot.readString();
                  _val9 = iprot.readString();
                  struct.mapOfStringStrings.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setMapOfStringStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new Location();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCATIONS_BY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.locationsByName = new HashMap<String,Location>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12; // required
                  Location _val13; // optional
                  _key12 = iprot.readString();
                  _val13 = new Location();
                  _val13.read(iprot);
                  struct.locationsByName.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setLocationsByNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BigResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.someString != null) {
        oprot.writeFieldBegin(SOME_STRING_FIELD_DESC);
        oprot.writeString(struct.someString);
        oprot.writeFieldEnd();
      }
      if (struct.listOfStrings != null) {
        if (struct.isSetListOfStrings()) {
          oprot.writeFieldBegin(LIST_OF_STRINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listOfStrings.size()));
            for (String _iter14 : struct.listOfStrings)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.setOfStrings != null) {
        if (struct.isSetSetOfStrings()) {
          oprot.writeFieldBegin(SET_OF_STRINGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.setOfStrings.size()));
            for (String _iter15 : struct.setOfStrings)
            {
              oprot.writeString(_iter15);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapOfStringStrings != null) {
        if (struct.isSetMapOfStringStrings()) {
          oprot.writeFieldBegin(MAP_OF_STRING_STRINGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapOfStringStrings.size()));
            for (Map.Entry<String, String> _iter16 : struct.mapOfStringStrings.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.locationsByName != null) {
        if (struct.isSetLocationsByName()) {
          oprot.writeFieldBegin(LOCATIONS_BY_NAME_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.locationsByName.size()));
            for (Map.Entry<String, Location> _iter17 : struct.locationsByName.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              _iter17.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BigResponseTupleSchemeFactory implements SchemeFactory {
    public BigResponseTupleScheme getScheme() {
      return new BigResponseTupleScheme();
    }
  }

  private static class BigResponseTupleScheme extends TupleScheme<BigResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BigResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.someString);
      BitSet optionals = new BitSet();
      if (struct.isSetListOfStrings()) {
        optionals.set(0);
      }
      if (struct.isSetSetOfStrings()) {
        optionals.set(1);
      }
      if (struct.isSetMapOfStringStrings()) {
        optionals.set(2);
      }
      if (struct.isSetAge()) {
        optionals.set(3);
      }
      if (struct.isSetLanguage()) {
        optionals.set(4);
      }
      if (struct.isSetLocation()) {
        optionals.set(5);
      }
      if (struct.isSetLocationsByName()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetListOfStrings()) {
        {
          oprot.writeI32(struct.listOfStrings.size());
          for (String _iter18 : struct.listOfStrings)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetSetOfStrings()) {
        {
          oprot.writeI32(struct.setOfStrings.size());
          for (String _iter19 : struct.setOfStrings)
          {
            oprot.writeString(_iter19);
          }
        }
      }
      if (struct.isSetMapOfStringStrings()) {
        {
          oprot.writeI32(struct.mapOfStringStrings.size());
          for (Map.Entry<String, String> _iter20 : struct.mapOfStringStrings.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetLocationsByName()) {
        {
          oprot.writeI32(struct.locationsByName.size());
          for (Map.Entry<String, Location> _iter21 : struct.locationsByName.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BigResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.someString = iprot.readString();
      struct.setSomeStringIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list22 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listOfStrings = new ArrayList<String>(_list22.size);
          for (int _i23 = 0; _i23 < _list22.size; ++_i23)
          {
            String _elem24; // required
            _elem24 = iprot.readString();
            struct.listOfStrings.add(_elem24);
          }
        }
        struct.setListOfStringsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set25 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.setOfStrings = new HashSet<String>(2*_set25.size);
          for (int _i26 = 0; _i26 < _set25.size; ++_i26)
          {
            String _elem27; // required
            _elem27 = iprot.readString();
            struct.setOfStrings.add(_elem27);
          }
        }
        struct.setSetOfStringsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map28 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mapOfStringStrings = new HashMap<String,String>(2*_map28.size);
          for (int _i29 = 0; _i29 < _map28.size; ++_i29)
          {
            String _key30; // required
            String _val31; // optional
            _key30 = iprot.readString();
            _val31 = iprot.readString();
            struct.mapOfStringStrings.put(_key30, _val31);
          }
        }
        struct.setMapOfStringStringsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.location = new Location();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locationsByName = new HashMap<String,Location>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // required
            Location _val35; // optional
            _key34 = iprot.readString();
            _val35 = new Location();
            _val35.read(iprot);
            struct.locationsByName.put(_key34, _val35);
          }
        }
        struct.setLocationsByNameIsSet(true);
      }
    }
  }

}

